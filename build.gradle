plugins {
    id 'org.springframework.boot' version '2.1.1.RELEASE' apply false
    id 'com.google.protobuf' version '0.8.7'
    id 'com.palantir.docker' version '0.21.0'
    id 'com.github.kt3k.coveralls' version '2.8.2'
}

apply plugin: 'java'
apply plugin: 'idea'

group = 'io.yggdrash'
version = '0.10.0-SNAPSHOT'

defaultTasks ':yggdrash-node:bootRun'

ext {
    grpcVersion         = '1.18.0'
    protobufVersion     = '3.6.1'
    levelDBVersion      = '0.10'
    ehcacheVersion      = '3.6.2'
    scastleVersion      = '1.58.0.0'
    commonsCodecVersion = '1.11'
    commonsIOVersion    = '2.6'
    gsonVersion         = '2.8.5'
    jsonSimpleVersion   = '1.1'
    jacksonVersion      = '2.9.7'
    typesafeVersion     = '1.3.3'
    logbackVersion      = '1.2.3'
    annotationVersion   = '1.3.2'
    assertjVersion      = '3.11.1'
    commonLangVersion   = '3.8.1'
    collectionsVersion  = '4.2'

    importPackage = 'org.osgi.framework' +
            ',com.google.gson' +
            ',org.w3c.dom' +
            ',io.yggdrash.common.util' +
            ',io.yggdrash.core.blockchain' +
            ',io.yggdrash.core.contract' +
            ',io.yggdrash.core.runtime.annotation' +
            ',io.yggdrash.core.store' +
            ',io.yggdrash.contract.annotation' +
            ',io.yggdrash.contract.store' +
            ',io.yggdrash.contract.utils'
    excludeList = ["META-INF/LICENSE", "META-INF/NOTICE", "META-INF/*.SF", "META-INF/*.DSA", "META-INF/*.RSA", "META-INF/NOTICE"]
}

allprojects {
    apply plugin: 'com.github.kt3k.coveralls'
    apply plugin: 'jacoco'
    apply plugin: 'checkstyle'
    apply plugin: 'project-report'

    repositories {
        mavenCentral()
    }
}

subprojects {
    apply plugin: 'java'

    jacoco {
        toolVersion = '0.8.2'
    }

    checkstyle {
        ignoreFailures = true
        toolVersion = '8.15'
        maxWarnings = 0
        configFile = rootProject.file('config/checkstyle/checkstyle.xml')
    }

    compileJava {
        sourceCompatibility = 1.8  // can be switched to 11 for testing
        targetCompatibility = 1.8
        options.encoding = "UTF-8"
        options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
    }

    test {
        failFast = true
        systemProperty('spring.profiles.active', project.properties.get('springProfiles'))
    }
}

project(':yggdrash-core') {
    apply plugin: 'com.google.protobuf'

    dependencies {
        compile project(':yggdrash-contract-core')

        compile files('libs/cfr-0.139.jar')
        compile "io.grpc:grpc-protobuf:${grpcVersion}"
        compile "io.grpc:grpc-stub:${grpcVersion}"
        compile "io.grpc:grpc-netty:${grpcVersion}"
        compile "com.google.protobuf:protobuf-java:${protobufVersion}"
        compile "org.iq80.leveldb:leveldb:${levelDBVersion}"
        compile "org.ehcache:ehcache:${ehcacheVersion}"
        compile "com.madgag.spongycastle:prov:${scastleVersion}" // for SHA3 and SECP256K1
        compile "commons-codec:commons-codec:${commonsCodecVersion}"
        compile "commons-io:commons-io:${commonsIOVersion}"
        compile "com.google.code.gson:gson:${gsonVersion}"
        compile "com.fasterxml.jackson.core:jackson-databind:${jacksonVersion}"
        compile "com.typesafe:config:${typesafeVersion}"
        compile "ch.qos.logback:logback-classic:${logbackVersion}"
        compile "org.apache.commons:commons-lang3:${commonLangVersion}"
        compile "org.apache.commons:commons-collections4:${collectionsVersion}"
        compileOnly "javax.annotation:javax.annotation-api:${annotationVersion}"
        testCompile "org.assertj:assertj-core:${assertjVersion}"
    }

    protobuf {
        plugins {
            grpc {
                artifact = "io.grpc:protoc-gen-grpc-java:${grpcVersion}"
            }
        }
        protoc {
            artifact = "com.google.protobuf:protoc:${protobufVersion}"
        }
        generateProtoTasks {
            all()*.plugins {
                grpc {}
            }
        }
    }

    sourceSets {
        main {
            java {
                srcDirs 'build/generated/source/proto/main/grpc'
                srcDirs 'build/generated/source/proto/main/java'
            }
        }
    }

    task dpoaContract(type: Jar) {
        //Add current module source
        from(sourceSets.main.output) {
            include "**"
            exclude(["system-contracts"])
        }

        // Add dependency library
        from {
            configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
        }

        manifest {
            attributes(
                    'Bundle-ManifestVersion': '2',
                    'Bundle-Name': 'DPoA Contract',
                    'Bundle-Description': 'DPoA Contract',
                    'Bundle-Vendor': 'YGGDRASH',
                    'Bundle-SymbolicName': 'io.yggdrash.core.contract.osgi.DPoAContract',
                    'Bundle-Version': '1.0.0',
                    'Bundle-Activator': 'io.yggdrash.core.contract.osgi.DPoAContract',
                    'Import-Package': "${importPackage},io.yggdrash.core.contract.osgi"
            )
        }
        exclude(excludeList)
        archiveName "system-dpoa-contract-${manifest.attributes.get('Bundle-Version')}.jar"
    }

    task dpoaClientContract(type: Jar) {
        //Add current module source
        from(sourceSets.main.output) {
            include "**"
            exclude(["system-contracts"])
        }

        // Add dependency library
        from {
            configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
        }

        manifest {
            attributes(
                    'Bundle-ManifestVersion': '2',
                    'Bundle-Name': 'DPoA Client Contract',
                    'Bundle-Description': 'DPoA Client Contract',
                    'Bundle-Vendor': 'YGGDRASH',
                    'Bundle-SymbolicName': 'io.yggdrash.core.contract.osgi.DPoAClientContract',
                    'Bundle-Version': '1.0.0',
                    'Bundle-Activator': 'io.yggdrash.core.contract.osgi.DPoAClientContract',
                    'Import-Package': "${importPackage},io.yggdrash.core.contract.osgi"
            )
        }
        exclude(excludeList)
        archiveName "system-dpoa-client-contract-${manifest.attributes.get('Bundle-Version')}.jar"
    }

    task stemContract(type: Jar) {
        //Add current module source
        from(sourceSets.main.output) {
            include "**"
            exclude(["system-contracts"])
        }

        // Add dependency library
        from {
            configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
        }

        manifest {
            attributes(
                    'Bundle-ManifestVersion': '2',
                    'Bundle-Name': 'Stem Contract',
                    'Bundle-Description': 'Stem Contract',
                    'Bundle-Vendor': 'YGGDRASH',
                    'Bundle-SymbolicName': 'io.yggdrash.core.contract.osgi.StemContract',
                    'Bundle-Version': '1.0.0',
                    'Bundle-Activator': 'io.yggdrash.core.contract.osgi.StemContract',
                    'Export-Package': "io.yggdrash.core.contract.osgi",
                    'Import-Package': "${importPackage}"
            )
        }
        exclude(excludeList)
        archiveName "system-stem-contract-${manifest.attributes.get('Bundle-Version')}.jar"
    }

    task coinContract(type: Jar) {
        //Add current module source
        from(sourceSets.main.output) {
            include "**"
            exclude(["system-contracts"])
        }

        // Add dependency library
        from {
            configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
        }

        manifest {
            attributes(
                    'Bundle-ManifestVersion': '2',
                    'Bundle-Name': 'Coin Contract',
                    'Bundle-Description': 'Coin Contract',
                    'Bundle-Vendor': 'YGGDRASH',
                    'Bundle-SymbolicName': 'io.yggdrash.core.contract.osgi.CoinContract',
                    'Bundle-Version': '1.0.0',
                    'Bundle-Activator': 'io.yggdrash.core.contract.osgi.CoinContract',
                    'Export-Package': "io.yggdrash.core.contract.osgi",
                    'Import-Package': "${importPackage}"
            )
        }
        exclude(excludeList)
        archiveName "system-coin-contract-${manifest.attributes.get('Bundle-Version')}.jar"
    }

    def keystoreFile = new File("${project.projectDir.toString()}/src/main/resources/yggdrash.p12")
    def keystorePass = '098098'
    def keyAlias = 'yggdrash'
    task signJar(description: 'to Sign JAR.', group: 'Build') {

        dependsOn dpoaContract
        dependsOn dpoaClientContract
        dependsOn coinContract
        dependsOn stemContract

        doLast {
            def libFiles = file('build/libs').listFiles()
            libFiles.each {
                if (it.name.startsWith('yggdrash-core')) {
                    return
                }
                ant.jar(destfile: it, update: true) {
                    delegate.manifest {
                        attribute(name: 'permissions', value: 'all-permissions')
                        attribute(name: 'codebase', value: '*')
                    }
                }

                ant.signjar(
                        tsaurl: 'http://sha256timestamp.ws.symantec.com/sha256/timestamp',
                        alias: keyAlias,
                        jar: it,
                        keystore: "${keystoreFile.absolutePath}",
                        storepass: keystorePass,
                        destDir: 'build/libs',
                        verbose: true,
                        preservelastmodified: 'true'
                )
            }
        }
    }

    task removeContract(type: Delete) {
        delete fileTree(file('build/libs').absolutePath + '/../../../yggdrash-core/src/main/resources/system-contracts').include('*')
    }

    task copyContract(type: Copy) {
        dependsOn signJar
        dependsOn removeContract

        from file('build/libs')
        into file(file('build/libs').absolutePath + '/../../../yggdrash-core/src/main/resources/system-contracts')
        exclude "yggdrash-core*"
    }

    jar.dependsOn(copyContract)
}

project(':yggdrash-node') {
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'

    dependencies {
        compile project(':yggdrash-core')
        compile project(':yggdrash-gateway')
        compile "org.springframework.boot:spring-boot-starter-web"
        compile "org.springframework.boot:spring-boot-starter-undertow"
        compile "org.springframework.boot:spring-boot-starter-actuator"
        compile "org.springframework.cloud:spring-cloud-starter:2.0.0.RELEASE"
        compile "com.github.briandilley.jsonrpc4j:jsonrpc4j:1.5.3"
        annotationProcessor "org.springframework.boot:spring-boot-configuration-processor"
        //Must be disable in osgi
//        runtime "org.springframework.boot:spring-boot-devtools"
        testCompile "org.springframework.boot:spring-boot-starter-test"
        testCompile "io.grpc:grpc-testing:${grpcVersion}"
        testCompile project(':yggdrash-core').sourceSets.test.output
    }

    configurations {
        compile.exclude module: 'spring-boot-starter-tomcat'
        compile.exclude module: 'spring-security-rsa'
    }

    docker {
        dependsOn build
        dockerfile rootProject.file('docker/Dockerfile')
        name "yggdrash/${bootJar.baseName}"
        files bootJar.archivePath
        buildArgs(['JAR_FILE': "${bootJar.archiveName}"])
    }

    bootJar {
        manifest {
            attributes("Implementation-Version": rootProject.version)
        }
        launchScript()
    }
}

project(':yggdrash-gateway') {
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'

    dependencies {
        compile project(':yggdrash-core')
        compile "org.springframework.boot:spring-boot-starter-undertow"
        compile "org.springframework.boot:spring-boot-starter-websocket"
        compile "org.webjars:sockjs-client:1.1.2"
        compile "org.webjars:stomp-websocket:2.3.3"
        compile "org.webjars:bootstrap:3.3.7"
        compile "org.webjars:webjars-locator-core"
        testCompile "org.springframework.boot:spring-boot-starter-test"
        testCompile project(':yggdrash-core').sourceSets.test.output
    }

    configurations {
        compile.exclude module: 'spring-boot-starter-tomcat'
    }

    jar {
        classifier = 'classes'
        enabled = true
    }

    bootJar {
        enabled = false
    }
}

project(':yggdrash-validator') {
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'

    dependencies {
        compile project(':yggdrash-core')
        compile "io.github.lognet:grpc-spring-boot-starter:3.0.0"
        testCompile project(':yggdrash-core').sourceSets.test.output
        testCompile "com.vmlens:concurrent-junit:1.0.2"
    }
}

task jacocoRootReport(type: JacocoReport) {
    description = 'Generates an aggregate report from all subprojects'
    dependsOn = subprojects.test
    sourceDirectories.from = subprojects.sourceSets.main.allSource.srcDirs
    classDirectories.from =  subprojects.sourceSets.main.output
    executionData.from = subprojects.jacocoTestReport.executionData

    afterEvaluate {
        classDirectories.from = classDirectories.files.collect {
            fileTree(dir: it,
                exclude: ['io/yggdrash/proto/**']
            )
        }
    }

    reports {
        html.enabled = true // For Developer
        xml.enabled = true // For coveralls
    }
}

coveralls {
    sourceDirs = subprojects.sourceSets.main.allSource.srcDirs.flatten()
    jacocoReportPath = "${buildDir}/reports/jacoco/jacocoRootReport/jacocoRootReport.xml"
}

// TODO delete using scanning each project
// usage: ./gradlew cleanConfig -q
task cleanConfig(type: Delete) {
    println('# Clean YGGDRASH Config in All modules')
    delete '.yggdrash'
    delete 'yggdrash-core/.yggdrash'
    delete 'yggdrash-node/.yggdrash'
    delete 'yggdrash-validator/.yggdrash'
}
