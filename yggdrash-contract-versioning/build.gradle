ext {
    excludeList = ["META-INF/LICENSE", "META-INF/NOTICE", "META-INF/*.SF", "META-INF/*.DSA", "META-INF/*.RSA", "META-INF/NOTICE"]
}

task versioningContract(type: Jar) {
    from(sourceSets.main.output) {
        include "**"
        exclude(["system-contracts"])
    }

    from {
        configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
    }

    manifest {
        attributes(
                'Bundle-ManifestVersion': '2',
                'Bundle-Name': 'Versioning Contract',
                'Bundle-Description': 'Versioning Contract',
                'Bundle-Vendor': 'YGGDRASH',
                'Bundle-SymbolicName': 'io.yggdrash.contract.versioning.VersioningContract',
                'Bundle-Version': '1.0.0',
                'Bundle-Activator': 'io.yggdrash.contract.versioning.VersioningContract',
                'Import-Package': "io.yggdrash.contract.dpoa"
        )
    }
    exclude(excludeList)
    archiveName "system-versioning-contract-${manifest.attributes.get('Bundle-Version')}.jar"
}

def keystoreFile = new File("${project.projectDir.toString()}/src/main/resources/yggdrash.p12")
def keystorePass = '098098'
def keyAlias = 'yggdrash'
task signJar(description: 'to Sign JAR.', group: 'Build') {

    dependsOn versioningContract

    doLast {
        def libFiles = file('build/libs').listFiles()
        libFiles.each {
            if (it.name.startsWith("${project.name}")) {
                return
            }
            ant.jar(destfile: it, update: true) {
                delegate.manifest {
                    attribute(name: 'permissions', value: 'all-permissions')
                    attribute(name: 'codebase', value: '*')
                }
            }

            ant.signjar(
                    tsaurl: 'http://sha256timestamp.ws.symantec.com/sha256/timestamp',
                    alias: keyAlias,
                    jar: it,
                    keystore: "${keystoreFile.absolutePath}",
                    storepass: keystorePass,
                    destDir: 'build/libs',
                    verbose: true,
                    preservelastmodified: 'true'
            )
        }
    }
}

task removeContract(type: Delete) {
    delete fileTree(file('build/libs').absolutePath + '/../../../yggdrash-core/src/main/resources/system-contracts').include('*')
}

task copyContractToCoreBuildResrouce(type: Copy) {
    dependsOn removeContract
    dependsOn signJar

    def copyPath = file('build/libs').absolutePath + '/../../../yggdrash-core/build/resources/main/system-contracts'
    def copyResourcePath = file('build/libs').absolutePath + '/../../../yggdrash-core/src/main/resources/system-contracts'

    from file('build/libs')
    into file("${copyPath}")
    exclude "${project.name}*"

    doLast {
        def contractsFile = [file("${copyPath}/contracts"), file("${copyResourcePath}/contracts")]
        contractsFile.each {
            it.delete()
            it.getParentFile().mkdirs()
            it.createNewFile()

            def fw = new FileWriter(it, true)
            def libFiles = file('build/libs').listFiles()
            def totalSize = libFiles.length
            def cnt = 0
            libFiles.each {
                if (it.name.startsWith("${project.name}")) {
                    return
                }
                cnt++
                if (cnt == totalSize) {
                    fw.write(it.getName())
                } else {
                    fw.write("${it.getName()}\n")
                }
                fw.flush()
            }
            if (fw != null) {
                fw.close()
            }
        }
    }
}

task copyContractToCoreResrouce(type: Copy) {
    dependsOn removeContract
    dependsOn signJar

    from file('build/libs')
    into file(file('build/libs').absolutePath + '/../../../yggdrash-core/src/main/resources/system-contracts')
    exclude "${project.name}*"
}

jar {
    dependsOn copyContractToCoreBuildResrouce
    dependsOn copyContractToCoreResrouce
}

dependencies {
    compile project(':yggdrash-common')
    compile project(':yggdrash-contract')
}