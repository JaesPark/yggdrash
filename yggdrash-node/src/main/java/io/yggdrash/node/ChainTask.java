/* * Copyright 2018 Akashic Foundation * * Licensed under the Apache License, Version 2.0 (the "License"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package io.yggdrash.node;import com.google.common.annotations.VisibleForTesting;import io.yggdrash.common.config.Constants;import io.yggdrash.common.exception.FailedOperationException;import io.yggdrash.core.blockchain.Block;import io.yggdrash.core.blockchain.BlockChain;import io.yggdrash.core.blockchain.BranchGroup;import io.yggdrash.core.blockchain.Transaction;import io.yggdrash.core.net.NodeStatus;import io.yggdrash.core.wallet.Wallet;import io.yggdrash.proto.PbftProto;import io.yggdrash.validator.data.pbft.PbftBlock;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.scheduling.annotation.Scheduled;import java.util.List;@VisibleForTestingpublic class ChainTask {    private static final Logger log = LoggerFactory.getLogger(ChainTask.class);    @Autowired    private NodeStatus nodeStatus;    @Autowired    private BranchGroup branchGroup;    @Autowired    private Wallet wallet;    @Scheduled(cron = "*/10 * * * * *")    public void generateBlock() {        if (!nodeStatus.isUpStatus()) {            log.debug("Waiting for up status...");            return;        }        for (BlockChain branch : branchGroup.getAllBranch()) {            List<Transaction> txList =                    branch.getTransactionStore().getUnconfirmedTxsWithLimit(Constants.LIMIT.BLOCK_SYNC_SIZE);            Block block = io.yggdrash.core.blockchain.Block.nextBlock(wallet, txList, branch.getLastConfirmedBlock());            // PbftBlock test only            if (branch.getGenesisBlock() instanceof PbftBlock) {                branch.addBlock(new PbftBlock(PbftProto.PbftBlock.newBuilder().setBlock(block.getInstance()).build()));            } else {                throw new FailedOperationException("Not implemented");            }        }    }}